name: Nightly Regression - Banking API BDD Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test Environment'
        required: true
        default: 'railway'
        type: choice
        options:
          - railway
          - staging
          - test
      test_tags:
        description: 'Additional test tags (optional)'
        required: false
        default: ''
        type: string

env:
  PYTHON_VERSION: '3.11'
  TEST_ENVIRONMENT: ${{ github.event.inputs.test_environment || 'railway' }}

jobs:
  setup:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    outputs:
      api-url: ${{ steps.config.outputs.api-url }}
      auth-token: ${{ steps.config.outputs.auth-token }}
      test-environment: ${{ steps.config.outputs.test-environment }}
    
    steps:
      - name: Configure environment
        id: config
        run: |
          echo "=== Setup Configuration Debug ==="
          echo "TEST_ENVIRONMENT: ${{ env.TEST_ENVIRONMENT }}"
          echo "RAILWAY_API_URL secret: ${{ secrets.RAILWAY_API_URL || 'NOT_SET' }}"
          echo "RAILWAY_API_TOKEN secret: ${{ secrets.RAILWAY_API_TOKEN || 'NOT_SET' }}"

          case "${{ env.TEST_ENVIRONMENT }}" in
            "railway")
              API_URL="${{ secrets.RAILWAY_API_URL || 'https://wiremock-production.up.railway.app' }}"
              AUTH_TOKEN="${{ secrets.RAILWAY_API_TOKEN || 'banking-api-key-2024' }}"
              echo "Using Railway environment"
              echo "API URL will be: $API_URL"
              echo "api-url=$API_URL" >> $GITHUB_OUTPUT
              echo "auth-token=$AUTH_TOKEN" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "api-url=${{ secrets.STAGING_API_URL }}" >> $GITHUB_OUTPUT
              echo "auth-token=${{ secrets.STAGING_API_TOKEN }}" >> $GITHUB_OUTPUT
              ;;
            "test")
              echo "api-url=https://wiremock-production.up.railway.app" >> $GITHUB_OUTPUT
              echo "auth-token=banking-api-key-2024" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Using default environment"
              echo "api-url=https://wiremock-production.up.railway.app" >> $GITHUB_OUTPUT
              echo "auth-token=banking-api-key-2024" >> $GITHUB_OUTPUT
              ;;
          esac
          echo "test-environment=${{ env.TEST_ENVIRONMENT }}" >> $GITHUB_OUTPUT

          echo "=== Setup Outputs ==="
          cat $GITHUB_OUTPUT

  api-health-check:
    name: Pre-Test API Health Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Comprehensive API Health Check
        run: |
          API_URL="${{ secrets.RAILWAY_API_URL || 'https://wiremock-production.up.railway.app' }}"
          AUTH_TOKEN="${{ secrets.RAILWAY_API_TOKEN || 'banking-api-key-2024' }}"
          
          echo "üîç Testing API: $API_URL"
          echo "üîë Auth Token: ${AUTH_TOKEN:0:10}..." # Show first 10 chars only
          echo "üè• Running comprehensive health checks..."

          # Debug: Test DNS resolution
          echo "üîß Debug - Testing DNS resolution..."
          nslookup "wiremock-production.up.railway.app" || echo "DNS lookup failed"
          
          # Basic connectivity with retry
          echo "Testing basic connectivity..."
          connectivity_success=false
          for i in {1..3}; do
            # Use less strict curl options for Railway API
            status_code=$(curl -s --max-time 30 -o /dev/null -w "%{http_code}" "$API_URL" || echo "000")

            if [[ "$status_code" =~ ^[2-4][0-9][0-9]$ ]]; then
              echo "‚úÖ Basic connectivity: OK (attempt $i, status: $status_code)"
              connectivity_success=true
              break
            else
              echo "‚è≥ Retrying basic connectivity... (attempt $i/3, status: $status_code)"
              if [ $i -lt 3 ]; then
                sleep 10
              fi
            fi
          done

          if [ "$connectivity_success" = false ]; then
            echo "‚ö†Ô∏è Basic connectivity failed after 3 attempts, but continuing with health checks..."
          fi
          
          # Test Wiremock admin endpoints
          echo "Testing Wiremock admin endpoints..."
          for admin_endpoint in "__admin/health" "__admin/mappings"; do
            echo "Testing $admin_endpoint..."
            status_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 "$API_URL/$admin_endpoint" || echo "000")

            case $status_code in
              "200") echo "‚úÖ Wiremock admin ($admin_endpoint): OK (Status: $status_code)" ;;
              "000") echo "‚ö†Ô∏è Wiremock admin ($admin_endpoint): CONNECTION FAILED" ;;
              *) echo "‚ö†Ô∏è Wiremock admin ($admin_endpoint): Status $status_code" ;;
            esac
          done

          # Test sample banking endpoints
          echo "Testing banking API endpoints..."
          for endpoint in "customers/CUST001" "accounts/ACC001"; do
            echo "Testing endpoint: $endpoint"

            # Try with authentication
            status_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 \
              -H "Authorization: Bearer $AUTH_TOKEN" \
              -H "Content-Type: application/json" \
              "$API_URL/$endpoint" || echo "000")

            case $status_code in
              "200"|"201") echo "‚úÖ Banking API ($endpoint): SUCCESS (Status: $status_code)" ;;
              "404") echo "‚úÖ Banking API ($endpoint): NOT FOUND - Expected for test data (Status: $status_code)" ;;
              "401"|"403") echo "‚úÖ Banking API ($endpoint): AUTH REQUIRED - API is responding (Status: $status_code)" ;;
              "000") echo "‚ö†Ô∏è Banking API ($endpoint): CONNECTION FAILED" ;;
              *) echo "‚ö†Ô∏è Banking API ($endpoint): UNEXPECTED STATUS ($status_code)" ;;
            esac
          done
          
          echo "üè• Health check completed"

          # Always exit successfully - let individual tests handle their own failures
          exit 0

  full-regression:
    name: Full Regression Suite
    runs-on: ubuntu-latest
    needs: [setup, api-health-check]
    strategy:
      fail-fast: false
      matrix:
        test-suite: 
          - accounts
          - customers
          - bookings
          - loans
          - term_deposits
          - authentication
          - integration
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction
      
      - name: Create reports directory
        run: mkdir -p reports/allure-results reports/junit logs
      
      - name: Verify API connectivity
        env:
          BASE_URL: ${{ secrets.RAILWAY_API_URL || 'https://wiremock-production.up.railway.app' }}
          AUTH_TOKEN: ${{ secrets.RAILWAY_API_TOKEN || 'banking-api-key-2024' }}
        run: |
          echo "Verifying Railway Wiremock connectivity..."
          echo "API URL: $BASE_URL"

          # Test basic connectivity with retries
          for i in {1..3}; do
            if curl -f -s --max-time 30 "$BASE_URL/__admin/health" > /dev/null; then
              echo "‚úÖ Railway Wiremock is accessible (attempt $i)"
              break
            else
              echo "‚è≥ Waiting for Railway Wiremock... (attempt $i/3)"
              sleep 10
            fi
          done

          # Show available mappings
          echo "Available Wiremock mappings:"
          curl -s "$BASE_URL/__admin/mappings" | jq '.mappings | length' || echo "Could not fetch mappings"

      - name: Run regression tests - ${{ matrix.test-suite }}
        env:
          # Direct environment configuration (bypassing setup job)
          BASE_URL: ${{ secrets.RAILWAY_API_URL || 'https://wiremock-production.up.railway.app' }}
          AUTH_TOKEN: ${{ secrets.RAILWAY_API_TOKEN || 'banking-api-key-2024' }}
          TEST_ENVIRONMENT: railway
          ENVIRONMENT: railway
          LOG_LEVEL: INFO
          VERBOSE_OUTPUT: true
          RETRY_COUNT: 3
          TIMEOUT: 60
          # Additional environment variables for behave
          RAILWAY_API_URL: ${{ secrets.RAILWAY_API_URL || 'https://wiremock-production.up.railway.app' }}
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN || 'banking-api-key-2024' }}
          API_AUTH_TOKEN: ${{ secrets.RAILWAY_API_TOKEN || 'banking-api-key-2024' }}
        run: |
          # Use proper tag syntax for Behave (AND logic with spaces)
          TAGS="@regression and @${{ matrix.test-suite }} and not @quarantine"

          # Add additional tags if specified
          if [ -n "${{ github.event.inputs.test_tags }}" ]; then
            TAGS="$TAGS and ${{ github.event.inputs.test_tags }}"
          fi

          echo "Running tests with tags: $TAGS"
          echo "Target: $BASE_URL"
          echo "Environment: $TEST_ENVIRONMENT"
          echo "Auth Token: ${AUTH_TOKEN:0:10}..."

          # Debug environment variables
          echo "=== Environment Variables Debug ==="
          echo "BASE_URL: $BASE_URL"
          echo "RAILWAY_API_URL: $RAILWAY_API_URL"
          echo "TEST_ENVIRONMENT: $TEST_ENVIRONMENT"
          echo "ENVIRONMENT: $ENVIRONMENT"
          echo "=== Setup Job Outputs Debug ==="
          echo "Direct configuration approach - bypassing setup job outputs"

          # Run tests with retry logic
          for attempt in {1..2}; do
            echo "Test attempt $attempt/2"

            # Debug: Show what we're about to run
            echo "Command: poetry run behave --tags=\"$TAGS\" features/${{ matrix.test-suite }}/"
            echo "Working directory: $(pwd)"
            echo "Available features: $(ls features/${{ matrix.test-suite }}/ || echo 'Directory not found')"

            if BASE_URL="$BASE_URL" AUTH_TOKEN="$AUTH_TOKEN" ENVIRONMENT="$TEST_ENVIRONMENT" poetry run behave \
              --tags="$TAGS" \
              --format=allure_behave.formatter:AllureFormatter \
              -o reports/allure-results \
              --junit \
              --junit-directory=reports/junit \
              --format=pretty \
              --no-capture \
              features/${{ matrix.test-suite }}/; then
              echo "‚úÖ Tests passed on attempt $attempt"
              break
            else
              echo "‚ùå Tests failed on attempt $attempt"
              if [ $attempt -eq 2 ]; then
                echo "Tagged tests failed, trying fallback approach..."

                # Fallback: Run all tests in the directory without specific tags
                echo "Running fallback: all tests in features/${{ matrix.test-suite }}/"
                BASE_URL="$BASE_URL" AUTH_TOKEN="$AUTH_TOKEN" ENVIRONMENT="$TEST_ENVIRONMENT" poetry run behave \
                  --format=allure_behave.formatter:AllureFormatter \
                  -o reports/allure-results \
                  --junit \
                  --junit-directory=reports/junit \
                  --format=pretty \
                  --no-capture \
                  features/${{ matrix.test-suite }}/ || {
                    echo "‚ùå Fallback also failed"
                    echo "Capturing logs for debugging..."
                    ls -la features/${{ matrix.test-suite }}/ || echo "Directory listing failed"
                    exit 1
                  }
                break
              else
                echo "Retrying in 30 seconds..."
                sleep 30
              fi
            fi
          done
      
      - name: Generate test metrics
        if: always()
        run: |
          echo "## Regression Test Results - ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: railway" >> $GITHUB_STEP_SUMMARY
          echo "**API URL**: ${{ secrets.RAILWAY_API_URL || 'https://wiremock-production.up.railway.app' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -d "reports/junit" ]; then
            total=$(find reports/junit -name "*.xml" | xargs grep -h "<testcase" | wc -l || echo 0)
            failed=$(find reports/junit -name "*.xml" | xargs grep -h "<failure\|<error" | wc -l || echo 0)
            passed=$((total - failed))

            echo "**Test Statistics:**" >> $GITHUB_STEP_SUMMARY
            echo "- Total Tests: $total" >> $GITHUB_STEP_SUMMARY
            echo "- Passed: $passed" >> $GITHUB_STEP_SUMMARY
            echo "- Failed: $failed" >> $GITHUB_STEP_SUMMARY

            if [ $total -gt 0 ]; then
              pass_rate=$((passed * 100 / total))
              echo "- Pass Rate: ${pass_rate}%" >> $GITHUB_STEP_SUMMARY

              if [ $pass_rate -eq 100 ]; then
                echo "üéâ **Perfect score!**" >> $GITHUB_STEP_SUMMARY
              elif [ $pass_rate -ge 90 ]; then
                echo "‚úÖ **Excellent results!**" >> $GITHUB_STEP_SUMMARY
              elif [ $pass_rate -ge 80 ]; then
                echo "‚ö†Ô∏è **Good, but room for improvement**" >> $GITHUB_STEP_SUMMARY
              else
                echo "‚ùå **Needs attention**" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          else
            echo "No JUnit reports found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: regression-results-${{ matrix.test-suite }}
          path: |
            reports/
            logs/
          retention-days: 30
          compression-level: 6

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [setup, api-health-check]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Railway API Performance Baseline
        env:
          BASE_URL: ${{ secrets.RAILWAY_API_URL || 'https://wiremock-production.up.railway.app' }}
          AUTH_TOKEN: ${{ secrets.RAILWAY_API_TOKEN || 'banking-api-key-2024' }}
        run: |
          echo "Establishing Railway Wiremock performance baseline..."

          # Test basic response times
          for i in {1..5}; do
            response_time=$(curl -w "%{time_total}" -s -o /dev/null "$BASE_URL/__admin/health")
            echo "Health check $i: ${response_time}s"
          done

          # Test sample banking endpoints
          for endpoint in "customers/CUST001" "accounts/ACC001"; do
            response_time=$(curl -w "%{time_total}" -s -o /dev/null \
              -H "Authorization: Bearer $AUTH_TOKEN" \
              "$BASE_URL/$endpoint")
            echo "$endpoint response time: ${response_time}s"
          done

      - name: Run performance tests
        env:
          BASE_URL: ${{ secrets.RAILWAY_API_URL || 'https://wiremock-production.up.railway.app' }}
          AUTH_TOKEN: ${{ secrets.RAILWAY_API_TOKEN || 'banking-api-key-2024' }}
          TEST_ENVIRONMENT: railway
          ENVIRONMENT: railway
          PERFORMANCE_THRESHOLD_MS: 5000
          CONCURRENCY_LIMIT: 3
          REQUEST_TIMEOUT: 30
        run: |
          echo "Running performance tests against Railway Wiremock..."
          echo "Target: $BASE_URL"
          echo "Concurrency limit: $CONCURRENCY_LIMIT"
          echo "Timeout: $REQUEST_TIMEOUT seconds"

          BASE_URL="$BASE_URL" AUTH_TOKEN="$AUTH_TOKEN" ENVIRONMENT="$TEST_ENVIRONMENT" poetry run behave \
            --tags="@performance and not @quarantine" \
            --format=allure_behave.formatter:AllureFormatter \
            -o reports/allure-results \
            --junit \
            --junit-directory=reports/junit \
            --format=pretty \
            --no-capture || {
              echo "Performance tests completed with issues, checking results..."
              find reports/junit -name "*.xml" -exec echo "=== {} ===" \; -exec cat {} \; 2>/dev/null || true
            }
      
      - name: Generate performance summary
        if: always()
        run: |
          echo "## Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "**Target**: Railway Wiremock (${{ secrets.RAILWAY_API_URL || 'https://wiremock-production.up.railway.app' }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -d "reports/junit" ]; then
            total=$(find reports/junit -name "*.xml" | xargs grep -h "<testcase" | wc -l || echo 0)
            failed=$(find reports/junit -name "*.xml" | xargs grep -h "<failure\|<error" | wc -l || echo 0)
            passed=$((total - failed))

            echo "- Performance Tests: $total" >> $GITHUB_STEP_SUMMARY
            echo "- Passed: $passed" >> $GITHUB_STEP_SUMMARY
            echo "- Failed: $failed" >> $GITHUB_STEP_SUMMARY

            if [ $failed -eq 0 ] && [ $total -gt 0 ]; then
              echo "‚úÖ **All performance tests passed!**" >> $GITHUB_STEP_SUMMARY
            elif [ $failed -gt 0 ]; then
              echo "‚ö†Ô∏è **Some performance issues detected**" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: reports/
          retention-days: 30
          compression-level: 6

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [setup, api-health-check]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Railway Security Assessment
        env:
          BASE_URL: ${{ secrets.RAILWAY_API_URL || 'https://wiremock-production.up.railway.app' }}
          AUTH_TOKEN: ${{ secrets.RAILWAY_API_TOKEN || 'banking-api-key-2024' }}
        run: |
          echo "Performing security assessment on Railway Wiremock..."

          # Test authentication scenarios
          echo "Testing authentication scenarios..."

          # Test without token
          status_no_auth=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/customers/CUST001")
          echo "No auth token: HTTP $status_no_auth"

          # Test with invalid token
          status_bad_auth=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer invalid-token" \
            "$BASE_URL/customers/CUST001")
          echo "Invalid token: HTTP $status_bad_auth"

          # Test with valid token
          status_good_auth=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $AUTH_TOKEN" \
            "$BASE_URL/customers/CUST001")
          echo "Valid token: HTTP $status_good_auth"

      - name: Run security tests
        env:
          BASE_URL: ${{ secrets.RAILWAY_API_URL || 'https://wiremock-production.up.railway.app' }}
          AUTH_TOKEN: ${{ secrets.RAILWAY_API_TOKEN || 'banking-api-key-2024' }}
          TEST_ENVIRONMENT: railway
          ENVIRONMENT: railway
        run: |
          echo "Running security test suite against Railway Wiremock..."

          BASE_URL="$BASE_URL" AUTH_TOKEN="$AUTH_TOKEN" ENVIRONMENT="$TEST_ENVIRONMENT" poetry run behave \
            --tags="(@security or @authentication) and not @quarantine" \
            --format=allure_behave.formatter:AllureFormatter \
            -o reports/allure-results \
            --junit \
            --junit-directory=reports/junit \
            --format=pretty \
            --no-capture || {
              echo "Security tests completed, analyzing results..."
              echo "Security test summary:"
              find reports/junit -name "*.xml" | xargs grep -h "testcase" | wc -l || echo "No test results found"
            }
      
      - name: Generate security summary
        if: always()
        run: |
          echo "## Security Test Results" >> $GITHUB_STEP_SUMMARY
          echo "**Target**: Railway Wiremock (${{ secrets.RAILWAY_API_URL || 'https://wiremock-production.up.railway.app' }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -d "reports/junit" ]; then
            total=$(find reports/junit -name "*.xml" | xargs grep -h "<testcase" | wc -l || echo 0)
            failed=$(find reports/junit -name "*.xml" | xargs grep -h "<failure\|<error" | wc -l || echo 0)
            passed=$((total - failed))

            echo "- Security Tests: $total" >> $GITHUB_STEP_SUMMARY
            echo "- Passed: $passed" >> $GITHUB_STEP_SUMMARY
            echo "- Failed: $failed" >> $GITHUB_STEP_SUMMARY

            if [ $failed -eq 0 ] && [ $total -gt 0 ]; then
              echo "üîí **All security tests passed!**" >> $GITHUB_STEP_SUMMARY
            elif [ $failed -gt 0 ]; then
              echo "‚ö†Ô∏è **Security vulnerabilities detected**" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results
          path: reports/
          retention-days: 30
          compression-level: 6

  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [full-regression, performance-tests, security-tests]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-results
          pattern: '*-results*'
          merge-multiple: true
        continue-on-error: true
      
      - name: Install Allure
        run: |
          curl -o allure-2.24.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -zxvf allure-2.24.0.tgz -C /opt/
          sudo ln -s /opt/allure-2.24.0/bin/allure /usr/bin/allure
      
      - name: Merge Allure results
        run: |
          mkdir -p merged-results
          echo "Looking for Allure results..."
          find all-results -name "*.json" -path "*/allure-results/*" -exec cp {} merged-results/ \; 2>/dev/null || echo "No Allure results found"

          # Create dummy result if no artifacts found
          if [ ! "$(ls -A merged-results)" ]; then
            echo '{"name": "dummy", "status": "skipped"}' > merged-results/dummy.json
            echo "Created dummy result for report generation"
          fi

          echo "Merged results:"
          ls -la merged-results/

      - name: Merge JUnit results for failure analysis
        run: |
          mkdir -p merged-junit
          echo "Looking for JUnit XML results..."
          find all-results -name "*.xml" -path "*/junit/*" -exec cp {} merged-junit/ \; 2>/dev/null || echo "No JUnit results found"

          echo "JUnit results for analysis:"
          ls -la merged-junit/ || echo "No JUnit files found"

      - name: Generate Failure Summary
        run: |
          echo "Generating failure summary report..."
          python scripts/generate_failure_summary.py merged-junit || echo "Failed to generate failure summary"

          # Show summary in logs
          if [ -f failure_summary.md ]; then
            echo "=== FAILURE SUMMARY GENERATED ==="
            head -50 failure_summary.md
            echo "=== (see full report in artifacts) ==="

            # Add the full failure summary content to GitHub Step Summary
            echo "## üö® Test Failure Analysis" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Add the entire failure summary content to step summary
            cat failure_summary.md >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "---" >> $GITHUB_STEP_SUMMARY
            echo "üìã **Full detailed report also available as downloadable artifact**" >> $GITHUB_STEP_SUMMARY
          else
            echo "No failure summary file created"
            echo "## ‚úÖ All Tests Passed!" >> $GITHUB_STEP_SUMMARY
            echo "No test failures detected in this run." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Generate Allure report
        run: |
          allure generate merged-results --clean -o allure-report
      
      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
          retention-days: 30

      - name: Upload Failure Summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: failure-summary
          path: |
            failure_summary.md
            merged-junit/
          retention-days: 30
      
      - name: Calculate test metrics
        run: |
          echo "## üìä Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          total_tests=$(find all-results -name "*.xml" -path "*/junit/*" -exec grep -h "<testcase" {} \; 2>/dev/null | wc -l || echo 0)
          failed_tests=$(find all-results -name "*.xml" -path "*/junit/*" -exec grep -h "<failure\|<error" {} \; 2>/dev/null | wc -l || echo 0)
          passed_tests=$((total_tests - failed_tests))
          
          echo "- **Total Tests**: $total_tests" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed**: $passed_tests" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed**: $failed_tests" >> $GITHUB_STEP_SUMMARY
          
          if [ $total_tests -gt 0 ]; then
            pass_rate=$((passed_tests * 100 / total_tests))
            echo "- **Pass Rate**: ${pass_rate}%" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéØ **Environment**: railway" >> $GITHUB_STEP_SUMMARY
          echo "üîó **API URL**: ${{ secrets.RAILWAY_API_URL || 'https://wiremock-production.up.railway.app' }}" >> $GITHUB_STEP_SUMMARY

  slack-notification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [full-regression, performance-tests, security-tests, generate-report]
    if: always() && (failure() || success())
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#banking-api-tests'
          username: 'Banking API Tests'
          icon_emoji: ':bank:'
          title: 'Banking API Nightly Regression Results'
          text: |
            Environment: railway
            Regression: ${{ needs.full-regression.result }}
            Performance: ${{ needs.performance-tests.result }}
            Security: ${{ needs.security-tests.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL != null