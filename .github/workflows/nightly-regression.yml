name: Nightly Regression - Banking API BDD Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test Environment'
        required: true
        default: 'railway'
        type: choice
        options:
          - railway
          - staging
          - test
      test_tags:
        description: 'Additional test tags (optional)'
        required: false
        default: ''
        type: string

env:
  PYTHON_VERSION: '3.11'
  TEST_ENVIRONMENT: ${{ github.event.inputs.test_environment || 'railway' }}

jobs:
  setup:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    outputs:
      api-url: ${{ steps.config.outputs.api-url }}
      auth-token: ${{ steps.config.outputs.auth-token }}
      test-environment: ${{ steps.config.outputs.test-environment }}
    
    steps:
      - name: Configure environment
        id: config
        run: |
          case "${{ env.TEST_ENVIRONMENT }}" in
            "railway")
              echo "api-url=${{ secrets.RAILWAY_API_URL }}" >> $GITHUB_OUTPUT
              echo "auth-token=${{ secrets.RAILWAY_API_TOKEN }}" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "api-url=${{ secrets.STAGING_API_URL }}" >> $GITHUB_OUTPUT
              echo "auth-token=${{ secrets.STAGING_API_TOKEN }}" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "api-url=https://your-wiremock-app.railway.app" >> $GITHUB_OUTPUT
              echo "auth-token=banking-api-key-2024" >> $GITHUB_OUTPUT
              ;;
          esac
          echo "test-environment=${{ env.TEST_ENVIRONMENT }}" >> $GITHUB_OUTPUT

  api-health-check:
    name: Pre-Test API Health Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Comprehensive API Health Check
        run: |
          API_URL="${{ needs.setup.outputs.api-url }}"
          AUTH_TOKEN="${{ needs.setup.outputs.auth-token }}"
          
          echo "🔍 Testing API: $API_URL"
          echo "🏥 Running comprehensive health checks..."
          
          # Basic connectivity
          echo "Testing basic connectivity..."
          if curl -f -s --max-time 30 "$API_URL" > /dev/null; then
            echo "✅ Basic connectivity: OK"
          else
            echo "❌ Basic connectivity: FAILED"
            exit 1
          fi
          
          # Authentication endpoints
          echo "Testing authentication..."
          for endpoint in "customers/CUST001" "accounts/ACC001"; do
            status_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 \
              -H "Authorization: Bearer $AUTH_TOKEN" \
              "$API_URL/$endpoint")
            
            if [[ $status_code -eq 200 ]] || [[ $status_code -eq 404 ]]; then
              echo "✅ Auth test ($endpoint): OK (Status: $status_code)"
            else
              echo "⚠️ Auth test ($endpoint): Status $status_code"
            fi
          done
          
          echo "🏥 Health check completed"

  full-regression:
    name: Full Regression Suite
    runs-on: ubuntu-latest
    needs: [setup, api-health-check]
    strategy:
      fail-fast: false
      matrix:
        test-suite: 
          - accounts
          - customers
          - bookings
          - loans
          - term_deposits
          - authentication
          - integration
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction
      
      - name: Create reports directory
        run: mkdir -p reports/allure-results reports/junit logs
      
      - name: Run regression tests - ${{ matrix.test-suite }}
        env:
          BASE_URL: ${{ needs.setup.outputs.api-url }}
          AUTH_TOKEN: ${{ needs.setup.outputs.auth-token }}
          TEST_ENVIRONMENT: ${{ needs.setup.outputs.test-environment }}
          LOG_LEVEL: INFO
          VERBOSE_OUTPUT: true
        run: |
          TAGS="@regression,@${{ matrix.test-suite }}"
          
          # Add additional tags if specified
          if [ -n "${{ github.event.inputs.test_tags }}" ]; then
            TAGS="$TAGS,${{ github.event.inputs.test_tags }}"
          fi
          
          echo "Running tests with tags: $TAGS"
          
          poetry run behave \
            --tags="$TAGS" \
            --format=allure_behave.formatter:AllureFormatter \
            --outdir=reports/allure-results \
            --format=junit \
            --junit-directory=reports/junit \
            --format=pretty \
            --outfile=reports/behave-${{ matrix.test-suite }}.log \
            features/${{ matrix.test-suite }}/
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: regression-results-${{ matrix.test-suite }}
          path: |
            reports/
            logs/
          retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [setup, api-health-check]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Run performance tests
        env:
          BASE_URL: ${{ needs.setup.outputs.api-url }}
          AUTH_TOKEN: ${{ needs.setup.outputs.auth-token }}
          TEST_ENVIRONMENT: ${{ needs.setup.outputs.test-environment }}
          PERFORMANCE_THRESHOLD_MS: 3000
          CONCURRENCY_LIMIT: 5
        run: |
          poetry run behave \
            --tags=@performance \
            --format=allure_behave.formatter:AllureFormatter \
            --outdir=reports/allure-results \
            --junit \
            --junit-directory=reports/junit
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: reports/
          retention-days: 30

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [setup, api-health-check]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Run security tests
        env:
          BASE_URL: ${{ needs.setup.outputs.api-url }}
          AUTH_TOKEN: ${{ needs.setup.outputs.auth-token }}
          TEST_ENVIRONMENT: ${{ needs.setup.outputs.test-environment }}
        run: |
          poetry run behave \
            --tags=@security,@authentication \
            --format=allure_behave.formatter:AllureFormatter \
            --outdir=reports/allure-results \
            --junit \
            --junit-directory=reports/junit
      
      - name: Upload security results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-results
          path: reports/
          retention-days: 30

  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [full-regression, performance-tests, security-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: all-results
      
      - name: Install Allure
        run: |
          curl -o allure-2.24.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -zxvf allure-2.24.0.tgz -C /opt/
          sudo ln -s /opt/allure-2.24.0/bin/allure /usr/bin/allure
      
      - name: Merge Allure results
        run: |
          mkdir -p merged-results
          find all-results -name "*.json" -path "*/allure-results/*" -exec cp {} merged-results/ \;
      
      - name: Generate Allure report
        run: |
          allure generate merged-results --clean -o allure-report
      
      - name: Upload Allure report
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: allure-report/
          retention-days: 30
      
      - name: Calculate test metrics
        run: |
          echo "## 📊 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          total_tests=$(find all-results -name "*.xml" -path "*/junit/*" | xargs grep -h "<testcase" | wc -l)
          failed_tests=$(find all-results -name "*.xml" -path "*/junit/*" | xargs grep -h "<failure\|<error" | wc -l || echo 0)
          passed_tests=$((total_tests - failed_tests))
          
          echo "- **Total Tests**: $total_tests" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed**: $passed_tests" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed**: $failed_tests" >> $GITHUB_STEP_SUMMARY
          
          if [ $total_tests -gt 0 ]; then
            pass_rate=$((passed_tests * 100 / total_tests))
            echo "- **Pass Rate**: ${pass_rate}%" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Environment**: ${{ needs.setup.outputs.test-environment }}" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **API URL**: ${{ needs.setup.outputs.api-url }}" >> $GITHUB_STEP_SUMMARY

  slack-notification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [full-regression, performance-tests, security-tests, generate-report]
    if: always() && (failure() || success())
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#banking-api-tests'
          username: 'Banking API Tests'
          icon_emoji: ':bank:'
          title: 'Banking API Nightly Regression Results'
          text: |
            Environment: ${{ needs.setup.outputs.test-environment }}
            Regression: ${{ needs.full-regression.result }}
            Performance: ${{ needs.performance-tests.result }}
            Security: ${{ needs.security-tests.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL != null