name: PR Validation - Banking API BDD Tests

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'features/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'behave.ini'
      - 'environments/**'
      - '.github/workflows/**'
      - 'Dockerfile'
      - 'docker-compose.yml'

env:
  PYTHON_VERSION: '3.11'
  TEST_ENVIRONMENT: 'railway'

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Run code formatting check
        run: |
          poetry run black --check --diff .
          poetry run isort --check-only --diff .
      
      - name: Run linting
        run: |
          poetry run flake8 features/
          poetry run mypy features/support/ features/steps/ || true

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      fail-fast: false
      matrix:
        test-suite: [authentication, accounts, customers]

    services:
      wiremock:
        image: wiremock/wiremock:latest
        ports:
          - 8081:8080
        options: >
          --health-cmd "curl -f http://localhost:8080/__admin/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction
      
      - name: Create test reports directory
        run: mkdir -p reports/allure-results reports/junit
      
      - name: Wait for Wiremock to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8081/__admin/health; do sleep 2; done'
          echo "Wiremock is ready!"

      - name: Load Wiremock mappings
        run: |
          # Load basic mappings for testing
          curl -X POST http://localhost:8081/__admin/mappings \
            -H "Content-Type: application/json" \
            -d '{
              "request": {
                "method": "GET",
                "urlPattern": "/customers/.*"
              },
              "response": {
                "status": 200,
                "headers": {
                  "Content-Type": "application/json"
                },
                "body": "{\"id\": \"CUST001\", \"name\": \"Test Customer\"}"
              }
            }'

      - name: Run smoke tests for ${{ matrix.test-suite }}
        env:
          BASE_URL: ${{ secrets.RAILWAY_API_URL || 'https://wiremock-production.up.railway.app' }}
          AUTH_TOKEN: ${{ secrets.RAILWAY_API_TOKEN || 'banking-api-key-2024' }}
          TEST_ENVIRONMENT: railway
          ENVIRONMENT: railway
        run: |
          # Test Railway Wiremock connectivity first
          echo "Testing connectivity to: $BASE_URL"
          curl -f "$BASE_URL/__admin/health" || echo "Admin endpoint not available, continuing with tests..."

          BASE_URL="$BASE_URL" AUTH_TOKEN="$AUTH_TOKEN" ENVIRONMENT="$TEST_ENVIRONMENT" poetry run behave \
            --tags="@smoke and not @quarantine" \
            --format=allure_behave.formatter:AllureFormatter \
            -o reports/allure-results \
            --junit \
            --junit-directory=reports/junit \
            --format=pretty \
            features/${{ matrix.test-suite }}/ || {
              echo "Tests failed, capturing logs..."
              find logs/ -name "*.log" -exec echo "=== {} ===" \; -exec cat {} \; 2>/dev/null || true
              exit 1
            }
      
      - name: Generate test summary
        if: always()
        run: |
          echo "## Test Results for ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY

          if [ -d "reports/junit" ]; then
            total=$(find reports/junit -name "*.xml" | xargs grep -h "<testcase" | wc -l || echo 0)
            failed=$(find reports/junit -name "*.xml" | xargs grep -h "<failure\|<error" | wc -l || echo 0)
            passed=$((total - failed))

            echo "- Total Tests: $total" >> $GITHUB_STEP_SUMMARY
            echo "- Passed: $passed" >> $GITHUB_STEP_SUMMARY
            echo "- Failed: $failed" >> $GITHUB_STEP_SUMMARY

            if [ $total -gt 0 ]; then
              pass_rate=$((passed * 100 / total))
              echo "- Pass Rate: ${pass_rate}%" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            reports/
            logs/
          retention-days: 30
          compression-level: 6

  api-health-check:
    name: API Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Check API availability
        run: |
          # Use environment-specific API URL
          if [ -n "${{ secrets.RAILWAY_API_URL }}" ]; then
            API_URL="${{ secrets.RAILWAY_API_URL }}"
            AUTH_TOKEN="${{ secrets.RAILWAY_API_TOKEN || 'banking-api-key-2024' }}"
            echo "Testing external API: $API_URL"
          else
            # Start local Wiremock for testing
            docker run -d --name test-wiremock -p 8082:8080 wiremock/wiremock:latest
            sleep 10
            API_URL="http://localhost:8082"
            AUTH_TOKEN="banking-api-key-2024"
            echo "Testing local Wiremock: $API_URL"
          fi

          # Basic connectivity test with retries
          for i in {1..5}; do
            if curl -f -s --max-time 10 "$API_URL" > /dev/null; then
              echo "✅ API is reachable (attempt $i)"
              break
            else
              echo "⏳ Waiting for API... (attempt $i/5)"
              sleep 5
            fi
          done

          # Test admin endpoints if available
          if curl -f -s --max-time 10 "$API_URL/__admin/health" > /dev/null; then
            echo "✅ Admin endpoints working"
          else
            echo "ℹ️ Admin endpoints not available (expected for production)"
          fi

  regression-subset:
    name: Regression Subset
    runs-on: ubuntu-latest
    needs: [smoke-tests, api-health-check]
    if: github.event.pull_request.base.ref == 'main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Setup Wiremock for regression tests
        run: |
          if [ -z "${{ secrets.RAILWAY_API_URL }}" ]; then
            docker run -d --name regression-wiremock -p 8083:8080 wiremock/wiremock:latest
            sleep 10
            echo "BASE_URL=http://localhost:8083" >> $GITHUB_ENV
          else
            echo "BASE_URL=${{ secrets.RAILWAY_API_URL }}" >> $GITHUB_ENV
          fi
          echo "AUTH_TOKEN=${{ secrets.RAILWAY_API_TOKEN || 'banking-api-key-2024' }}" >> $GITHUB_ENV

      - name: Run regression tests (subset)
        env:
          TEST_ENVIRONMENT: railway
          ENVIRONMENT: railway
        run: |
          # Verify API connectivity
          curl -f $BASE_URL || echo "API may not be ready yet"

          BASE_URL="$BASE_URL" AUTH_TOKEN="$AUTH_TOKEN" ENVIRONMENT="$TEST_ENVIRONMENT" poetry run behave \
            --tags="@regression and not @quarantine" \
            --tags="@happy_path and not @quarantine" \
            --format=allure_behave.formatter:AllureFormatter \
            -o reports/allure-results \
            --junit \
            --junit-directory=reports/junit \
            --format=pretty \
            --no-capture || {
              echo "Regression tests failed, capturing debug info..."
              find logs/ -name "*.log" -exec echo "=== {} ===" \; -exec cat {} \; 2>/dev/null || true
              exit 1
            }
      
      - name: Generate regression summary
        if: always()
        run: |
          echo "## Regression Test Results" >> $GITHUB_STEP_SUMMARY

          if [ -d "reports/junit" ]; then
            total=$(find reports/junit -name "*.xml" | xargs grep -h "<testcase" | wc -l || echo 0)
            failed=$(find reports/junit -name "*.xml" | xargs grep -h "<failure\|<error" | wc -l || echo 0)
            passed=$((total - failed))

            echo "- Total Regression Tests: $total" >> $GITHUB_STEP_SUMMARY
            echo "- Passed: $passed" >> $GITHUB_STEP_SUMMARY
            echo "- Failed: $failed" >> $GITHUB_STEP_SUMMARY

            if [ $total -gt 0 ]; then
              pass_rate=$((passed * 100 / total))
              echo "- Pass Rate: ${pass_rate}%" >> $GITHUB_STEP_SUMMARY

              if [ $pass_rate -lt 80 ]; then
                echo "⚠️ **Warning**: Pass rate below 80%" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi

      - name: Upload regression results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: regression-results
          path: reports/
          retention-days: 30
          compression-level: 6

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Create reports directory
        run: mkdir -p reports

      - name: Run security scan with bandit
        run: |
          poetry run bandit -r features/ -f json -o reports/bandit-report.json || true
          poetry run bandit -r features/ -f txt || true

      - name: Run dependency vulnerability scan
        run: |
          poetry run safety check --json --output reports/safety-report.json || true
          poetry run safety check || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: reports/
          retention-days: 30

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Create reports directory
        run: mkdir -p reports

      - name: Run tests with coverage
        env:
          BASE_URL: http://localhost:8081
          AUTH_TOKEN: banking-api-key-2024
          TEST_ENVIRONMENT: test
          ENVIRONMENT: test
        run: |
          # Start basic Wiremock for coverage tests
          docker run -d --name coverage-wiremock -p 8081:8080 wiremock/wiremock:latest
          sleep 10

          # Run tests with coverage
          poetry run coverage run -m behave --tags="@smoke and not @quarantine" --format=pretty features/ || true
          poetry run coverage report
          poetry run coverage html -d reports/coverage-html
          poetry run coverage xml -o reports/coverage.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: reports/
          retention-days: 30

  notify-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [smoke-tests, regression-subset, security-scan, code-coverage]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download test artifacts for failure analysis
        uses: actions/download-artifact@v4
        with:
          path: pr-results
          pattern: '*-results'
          merge-multiple: true
        continue-on-error: true

      - name: Generate PR Failure Summary
        run: |
          # Look for JUnit results from PR tests
          mkdir -p pr-junit
          find pr-results -name "*.xml" -path "*/junit/*" -exec cp {} pr-junit/ \; 2>/dev/null || echo "No JUnit results found"

          # Generate failure summary for PR
          if [ -d pr-junit ] && [ "$(ls -A pr-junit)" ]; then
            echo "Generating PR failure summary..."
            python scripts/generate_failure_summary.py pr-junit || echo "Failed to generate failure summary"

            if [ -f failure_summary.md ]; then
              echo "## 🚨 PR Test Failure Analysis" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY

              # Add the entire failure summary content to step summary
              cat failure_summary.md >> $GITHUB_STEP_SUMMARY

              echo "" >> $GITHUB_STEP_SUMMARY
              echo "---" >> $GITHUB_STEP_SUMMARY
              echo "📋 **Full detailed report also available as downloadable artifact**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "No test failures detected in PR tests"
            echo "## ✅ All PR Tests Passed!" >> $GITHUB_STEP_SUMMARY
            echo "No test failures detected in this PR." >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

      - name: Upload PR Failure Summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pr-failure-summary
          path: |
            failure_summary.md
            pr-junit/
          retention-days: 7
        continue-on-error: true
      - name: PR Comment with Results
        uses: actions/github-script@v7
        with:
          script: |
            const smokePassed = '${{ needs.smoke-tests.result }}' === 'success';
            const regressionPassed = '${{ needs.regression-subset.result }}' === 'success' || '${{ needs.regression-subset.result }}' === 'skipped';
            const lintPassed = '${{ needs.lint-and-format.result }}' === 'success';
            const healthCheckPassed = '${{ needs.api-health-check.result }}' === 'success';

            let comment = '## 🧪 Banking API BDD Test Results\n\n';
            comment += `**Code Quality**: ${lintPassed ? '✅ PASSED' : '❌ FAILED'}\n`;
            comment += `**API Health Check**: ${healthCheckPassed ? '✅ PASSED' : '❌ FAILED'}\n`;
            comment += `**Smoke Tests**: ${smokePassed ? '✅ PASSED' : '❌ FAILED'}\n`;
            comment += `**Regression Tests**: ${regressionPassed ? '✅ PASSED' : '❌ FAILED / SKIPPED'}\n\n`;

            const allPassed = smokePassed && regressionPassed && lintPassed && healthCheckPassed;

            if (allPassed) {
              comment += '🎉 **All checks passed!** This PR is ready for review.\n\n';
              comment += '### Next Steps:\n';
              comment += '- Code review by team members\n';
              comment += '- Manual testing if required\n';
              comment += '- Merge when approved\n';
            } else {
              comment += '❌ **Some checks failed.** Please address the issues before merging.\n\n';
              comment += '### Action Required:\n';
              if (!lintPassed) comment += '- Fix code quality issues (linting/formatting)\n';
              if (!healthCheckPassed) comment += '- Check API connectivity issues\n';
              if (!smokePassed) comment += '- Fix failing smoke tests\n';
              if (!regressionPassed && '${{ needs.regression-subset.result }}' !== 'skipped') {
                comment += '- Fix failing regression tests\n';
              }
            }

            comment += '\n### 📊 Resources:\n';
            comment += `- [View detailed test reports](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            comment += `- [Download test artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            comment += '- Check the **Summary** tab for detailed test metrics\n';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });